import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import Account from '@/utils/models/account';
import Bill from '@/utils/models/bill';
import { connect } from '@/utils/config/dbConfig';
import mongoose from 'mongoose';
import axios from '@/app/libs/axios';

// TƒÉng gi·ªõi h·∫°n listeners ƒë·ªÉ tr√°nh warning
mongoose.connection.setMaxListeners(20);

// Middleware ki·ªÉm tra quy·ªÅn admin
async function checkAdminPermission() {
  const session = await getServerSession();
  if (!session || session.user?.email !== 'ntd4996@gmail.com') {
    return false;
  }
  return true;
}

// H√†m tr√≠ch xu·∫•t mention t·ª´ chu·ªói (l·∫•y ph·∫ßn sau @ v√† tr∆∞·ªõc kho·∫£ng tr·∫Øng)
function extractMention(mentionString: string | null | undefined): string {
  if (!mentionString) return '';
  const match = mentionString.match(/@(\S+)/);
  return match ? match[1] : '';
}

// H√†m format s·ªë ti·ªÅn theo ƒë·ªãnh d·∫°ng VND
function formatCurrency(amount: number | string) {
  const numAmount = typeof amount === 'string' ? parseFloat(amount) : amount;
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(numAmount);
}

// H√†m g·ª≠i tin nh·∫Øn ƒë·∫øn Mattermost
async function sendMattermostMessage(userId: string, message: string) {
  try {
    // G·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp ƒë·∫øn user
    const response = await axios.post(
      `${process.env.URL_API_MATTERMOST}posts`,
      {
        channel_id: userId,
        message: message,
        props: {
          disable_mention_notifications: true,
        },
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.TOKEN_BOT_MATTERMOST}`,
          'Content-Type': 'application/json',
        },
      }
    );

    return response.data;
  } catch (error) {
    console.error('Error sending Mattermost message:', error);
    if (error instanceof Error) {
      throw new Error(error.message);
    }
    throw new Error('Error sending message to Mattermost');
  }
}

// H√†m chuy·ªÉn ƒë·ªïi email th√†nh mention
function emailToMention(email: string): string {
  return '@' + email.split('@')[0];
}

// H√†m t·∫°o n·ªôi dung tin nh·∫Øn
function createReminderMessage(
  accountName: string,
  unpaidBills: any[],
  totalUnpaid: number
) {
  const currentDate = new Date().toLocaleDateString('vi-VN', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  });

  return `### üîî Th√¥ng b√°o t·ª´ QR-Payshare
  
Xin ch√†o **${accountName}**,

ƒê√¢y l√† tin nh·∫Øn t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng QR-Payshare. Ch√∫ng t√¥i nh·∫≠n th·∫•y b·∫°n c√≥ **${
    unpaidBills.length
  } h√≥a ƒë∆°n** ch∆∞a thanh to√°n.

#### üìù Chi ti·∫øt c√°c h√≥a ƒë∆°n:

| M√£ Hƒê | T√™n h√≥a ƒë∆°n | S·ªë ti·ªÅn g·ªëc | Sau gi·∫£m gi√° | Ng∆∞·ªùi t·∫°o | Links |
|:---:|:---|---:|---:|:---:|:---|
${unpaidBills
  .map(
    (bill) =>
      `| #${bill.uid} | ${bill.nameBill} | ${formatCurrency(
        bill.amount
      )} | ${formatCurrency(bill.moneyAfterReduction)} | ${emailToMention(
        bill.createBy
      )} | [Mattermost](https://mattermost.demetio.com/demetio/pl/${
        bill.idPost
      }) ‚Ä¢ [QR-Payshare](https://qr-payshare.datnt.dev/split-the-bill/${
        bill.billId
      }) |`
  )
  .join('\n')}

#### üí∞ T·ªïng s·ªë ti·ªÅn c·∫ßn thanh to√°n: **${formatCurrency(totalUnpaid)}**

Vui l√≤ng thanh to√°n c√°c h√≥a ƒë∆°n tr√™n ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i c·ªßa b·∫°n v√† nh·ªØng ng∆∞·ªùi kh√°c.
N·∫øu b·∫°n ƒë√£ thanh to√°n, vui l√≤ng li√™n h·ªá t·ªõi ng∆∞·ªùi t·∫°o ƒë∆°n v√† b·ªè qua tin nh·∫Øn n√†y.
N·∫øu b·∫°n mu·ªën thanh to√°n nhi·ªÅu h∆°n 1 l·∫ßn th√¨ c·ª© t·ª± nhi√™n :yaotea: 

üîç Xem t·∫•t c·∫£ h√≥a ƒë∆°n ch∆∞a thanh to√°n c·ªßa b·∫°n t·∫°i: [https://qr-payshare.datnt.dev/unpaid](https://qr-payshare.datnt.dev/unpaid)

---
*Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông v√†o ${currentDate}*
*ƒê√¢y l√† tin nh·∫Øn t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi tr·ª±c ti·∫øp.*`;
}

interface TransferPerson {
  discountAmount: number;
  amount: string;
  moneyAfterReduction: number;
  checked: boolean;
  mention: string;
}

interface BillWithTransfers {
  _id: string;
  uid: number;
  nameBill: string;
  listTransferPerson: TransferPerson[];
  createdAt: Date;
  idPost?: string;
  createBy: string;
}

// GET /api/admin/accounts/remind
export async function GET() {
  const isAdmin = await checkAdminPermission();
  if (!isAdmin) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    // ƒê·∫£m b·∫£o k·∫øt n·ªëi MongoDB ƒë∆∞·ª£c ƒë√≥ng ƒë√∫ng c√°ch
    if (mongoose.connection.readyState === 0) {
      await connect();
    }

    // L·∫•y t·∫•t c·∫£ t√†i kho·∫£n c√≥ mention v√† idMattermost
    const accounts = await Account.find({
      mention: { $ne: '' },
      idMattermost: { $ne: '' },
    });

    const debtData = [];
    const messageResults = [];

    // L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n
    const allBills = await Bill.find({}).sort({ createdAt: -1 });

    for (const account of accounts) {
      try {
        // L·∫•y ph·∫ßn mention ch√≠nh c·ªßa account (kh√¥ng bao g·ªìm emoji)
        const accountMention = extractMention(account.mention);
        if (!accountMention) continue;

        const unpaidBills: Array<{
          billId: string;
          uid: number;
          nameBill: string;
          amount: string;
          moneyAfterReduction: number;
          createdAt: Date;
          mention: string;
          idPost?: string;
          createBy: string;
        }> = [];

        // Ki·ªÉm tra t·ª´ng h√≥a ƒë∆°n
        allBills.forEach((bill: BillWithTransfers) => {
          if (!bill.listTransferPerson) return;

          // T√¨m trong listTransferPerson nh·ªØng ng∆∞·ªùi ch∆∞a thanh to√°n (checked: false)
          bill.listTransferPerson.forEach((person) => {
            if (!person || !person.mention) return;

            const personMention = extractMention(person.mention);
            if (personMention === accountMention && person.checked === false) {
              try {
                unpaidBills.push({
                  billId: bill._id,
                  uid: bill.uid,
                  nameBill: bill.nameBill,
                  amount: person.amount,
                  moneyAfterReduction: person.moneyAfterReduction,
                  createdAt: bill.createdAt,
                  mention: person.mention,
                  idPost: bill.idPost || '',
                  createBy: bill.createBy,
                });
              } catch (error) {
                console.error(`Error processing bill ${bill.uid}:`, error);
              }
            }
          });
        });

        if (unpaidBills.length > 0) {
          // T√≠nh t·ªïng s·ªë ti·ªÅn ch∆∞a thanh to√°n (s·ª≠ d·ª•ng moneyAfterReduction)
          const totalUnpaid = unpaidBills.reduce(
            (sum, bill) => sum + bill.moneyAfterReduction,
            0
          );

          const accountData = {
            name: account.name,
            mention: account.mention,
            idMattermost: account.idMattermost,
            unpaidBills: unpaidBills.map((bill) => ({
              billId: bill.billId,
              uid: bill.uid,
              nameBill: bill.nameBill,
              amount: bill.amount,
              moneyAfterReduction: bill.moneyAfterReduction,
              formattedAmount: formatCurrency(bill.amount),
              formattedMoneyAfterReduction: formatCurrency(
                bill.moneyAfterReduction
              ),
              createdAt: bill.createdAt,
              originalMention: bill.mention,
              idPost: bill.idPost,
              createBy: bill.createBy,
            })),
            totalUnpaid: totalUnpaid,
            formattedTotalUnpaid: formatCurrency(totalUnpaid),
          };

          debtData.push(accountData);

          // T·∫°o v√† g·ª≠i tin nh·∫Øn
          try {
            const message = createReminderMessage(
              account.name,
              unpaidBills,
              totalUnpaid
            );
            await sendMattermostMessage(account.idMattermost, message);
            messageResults.push({
              userId: account.idMattermost,
              status: 'success',
              message: 'Reminder sent successfully',
            });
          } catch (error) {
            console.error(`Error sending reminder to ${account.name}:`, error);
            messageResults.push({
              userId: account.idMattermost,
              status: 'error',
              message:
                error instanceof Error
                  ? error.message
                  : 'Unknown error occurred',
            });
          }
        }
      } catch (error) {
        console.error(`Error processing account ${account.name}:`, error);
      }
    }

    return NextResponse.json({
      debtData,
      messageResults,
    });
  } catch (error) {
    console.error('Error checking debts:', error);
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    );
  } finally {
    // Kh√¥ng ƒë√≥ng k·∫øt n·ªëi ·ªü ƒë√¢y v√¨ Next.js s·∫Ω t√°i s·ª≠ d·ª•ng k·∫øt n·ªëi
  }
}
